#import statements for various packages needed to compute values and plot end result
import numpy as np
from scipy.interpolate import RegularGridInterpolator
from MRCFile import MRCFile
import matplotlib.pyplot as plt
from project_fst import project_fst
from project_fst import generate_rotation_matrix
from project_fst import n_matrix

def get_N(data):
    return data[0][0].shape[0]

def get_r(N):
    return np.zeros(N)

def get_s(N, r):
    s = np.fft.fftshift(np.fft.fft(r))
    s = np.tile(s[np.newaxis, np.newaxis, :], (N, N, 1))
    return s

def get_reconstruction(N):
    return np.zeros((N, N, N))


def reconstruct(images, orientations):
    """
    @param images: images generated by our project_fst function stored as numpy arrays
    @param orientations: rotations matrices for images being passed in
    :return: a 3D reconstruction of our molecule 
    """
    data = zip(images, orientations) #zipped the two params to create tuples of images and orientations as to group them together
    N = get_N(data)
    r = get_r(N)
    r[int(0.5 * N)/2: N - (int(0.5 * N)/2)] = 1 #the rect function
    s = get_s(N, r)
    reconstruction = get_reconstruction(N)
    if True:
        H = 0
    for image, R in data:
        I_hat = np.fft.fftshift(np.fft.fft2(image))
        I_hat = np.tile(I_hat[..., np.newaxis], (1, 1, N))
        image = np.real(np.fft.ifftn(np.fft.ifftshift(I_hat*s)))
        interpolation = RegularGridInterpolator((np.linspace(-1, 1, N), np.linspace(-1, 1, N), np.linspace(-1, 1, N)), image, method='linear', bounds_error=False, fill_value=0)
        #Re-using N_matrix from project_fst with modifications to the dimensions
        reconstruction += interpolation(np.dot(n_matrix(N, np.linspace(-1, 1, N)), R.transpose()))
        if True:
            third_column_of_R = R[:, 2]
            H += np.sum(int(0.5 * N)*np.sinc(int(0.5 * N) * np.dot(n_matrix(int(0.5 * N), np.arange(int(0.5 * N))), third_column_of_R)))
    if True:
        I_hat = np.fft.fftshift(np.fft.fftn(reconstruction))
        return np.real(np.fft.ifftn(np.fft.ifftshift(I_hat/H)))
    else:
        return reconstruction



orientations = [generate_rotation_matrix() for i in range(10)] #testing with 25 images and orientations(rotation matrices)
images = []
molecule = MRCFile('zika_192.mrc')
for o in orientations:
    image = project_fst(molecule.data, o)
    images.append(image)
b = reconstruct(images, orientations)
reconstructed_molecule = MRCFile(b)
reconstructed_molecule.write_file('153.mrc', overwrite=True) #writing to a MRC File to be visualized in Chimera



